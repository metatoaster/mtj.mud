This file keep tracks of what needs to be done in the MUD in the form
of some rather raw ideas.

-----------------------------------------------------------------------
Fresh ideas:
-----------------------------------------------------------------------

Quickies
========
- Word wrap
- Paging (max 24 lines output for BBS post, help, etc)

Exits
=====
- Two types
- One that will be like a double link list
- The other will be a one way
- Two way will be like this:

- Standard two way exit?
Exit2
  exit = [room1, room2] (invariant len(Exit2) == 2)
  exit.enter(person, person.room(?)) (other params generalized?)
    # enter the other room

  both rooms will contain the relevant exits
  room1.exits = {'south': exit, ...}
  room2.exits = {'north': exit, ...}

- One way exit
Exit1
  exit = room
  exit.enter(person, person.room)


World
=====
- If there's a list that will keep track of all objects that exist in
the world, it can help with deleting unwanted objects (like logging out
people).
- Same deal for players, to keep track to who can tells be sent to.


Commands
========
- Distinctions between a method that is a command (send) and the one that
receives information or output (sendtouser) to the object.  Formatting too?
- Instead of doing stuff in process_cmd, make a do_cmd that actually
  does the command.  Make process_cmd to find the object to action the cmd
  in
- Make them into objects, and queue them.  So for instance, triggers need
  to be done on dying could be created beforehand.


Get Command
===========
Wizards can get anything, players can only pick up a subset of MudObjects
- Check object based on inheritance, perhaps.


Rooms
=====
A room factory will be nice to generate a bunch of rooms that have more
or less same descriptions.


Factory
=======
A factory to construct items could be useful.  Common items such as
potions, standard weapons or armor does not require multiple instances
as they are basically clones - all we need is a reference.  

This may not be an issue, but it will be a problem if for some reason 
something needs to find the parent (owner) of the potion.  However if
the question was, I see your potion I will steal your reference, it
won't be.  Maybe have a way for such objects to create a proper clone
of itself when such a case arrise.

The factory could have a dictionary of standard initiated objects with
the key the uninstanced class, the value an instance.  When someone
wants an object it just pass the class to the factory, and factory will
return reference to the instance, or instantiate a news instance of the
class (and returns it).


Transient Objects
=================
Since some objects have multiple references to it but not the other way
around, there must be a mechanism that will destroy those links when
that object is destroyed.

For instance:
- There is a list that keep tracks of online souls, with each of those
  souls pointing to a player.  However, a player is part of the world
  and a soul isn't, and so the link from player to soul need to be
  transient.
- Same deal for chat channels.


Finding objects
===============
Since users will be sending requests for objects as strings, there will
need to be a way to find membership.  Perhaps implementing __iter__ for
MudObjects will be nice.

Finding item in inventory:
    MudObj in MudContainer

Finding player logged on:
    Player in LoggedOnPlayer  # this may need a transient link

May want to look into emulating sequence types.
http://docs.python.org/ref/sequence-types.html

Sequence would hook directly to children perhaps, with a __call__ that
does what find_id does now.


Unit Test
=========

Need to catch nasties like

WARNING:runner:command '<notify.Login object, sender <MudObjects.Soul object at 0x2b74233e8d50>>' caused an exception
WARNING:runner:Traceback (most recent call last):
  File "/home/toaster/devel/python-devel/git/mtmud/runner.py", line 179, in _action
    cmd()
  File "/home/toaster/devel/python-devel/git/mtmud/MudActions.py", line 174, in __call__
    result = self.action()
  File "/home/toaster/devel/python-devel/git/mtmud/notify.py", line 121, in action
    return target.add(caller)
NameError: global name 'target' is not defined

Exception in thread Thread-2:
Traceback (most recent call last):
  File "/usr/lib64/python2.5/threading.py", line 460, in __bootstrap
    self.run()
  File "/usr/lib64/python2.5/threading.py", line 440, in run
    self.__target(*self.__args, **self.__kwargs)
  File "/home/toaster/devel/python-devel/git/mtmud/runner.py", line 65, in _start
    self._run()
  File "/home/toaster/devel/python-devel/git/mtmud/runner.py", line 55, in _run
    self._action()
  File "/home/toaster/devel/python-devel/git/mtmud/runner.py", line 187, in _action
    sender.send('A serious error has occurred!')
NameError: global name 'sender' is not defined


-----------------------------------------------------------------------
Implemented Ideas:
-----------------------------------------------------------------------

Rough idea on action classes
============================
Just some rough methods of what should be done.  It will *not* look
like this in final form.

def drink(caller):
    caller = 'You drink %s' % (self)
    caller.target = None  # the can of beer "dies", so nothing
    caller.siblings = '%s drinks %s' % (caller, self)
    caller.parent = '%s drinks %s' % (caller, self)
    caller.children = None  # other items in room/inventory do not care

def give(caller, item, target):
    caller = 'You give %s to %s' % (item, target)
    caller.target = '%s gives %s to you' % (caller, item)
    caller.siblings = '%s gives %s to %s' % (caller, item, target)
    caller.parent = '%s gives %s to %s' % (caller, item, target)
    caller.children = None

def say(caller, msg):
    caller = 'You say, "%s"' % (msg)
    caller.target = None  # no target
    caller.siblings = '%s says, "%s"' % (caller, msg)
    caller.parent = '%s says, "%s"' % (caller, msg)
    caller.children = None

def moveself(caller, target):
    # this is actually a two stage problem
    caller = '%s' % (target.longdesc)
    caller.target = None  # as the room doesn't really care, or
    caller.target = "%s enters you." % (target)  # this is just strange
    # old room
    caller.siblings = '%s leaves %s' % (caller, target)
    # new room
    caller.siblings = '%s enters.' % (caller)
    # old room, new room?>
    caller.parent = None
    caller.children = None  # children won't know parent moved


Event queue
===========

This like reader/writer problem
- each soul act as a reader (multiple readers)
- the event processor is the writer
- FIXME - need to demonstrate that this queue works by moving the say command
to use this queue.


Dynamic Aliases
---------------

Room exits - players will not want to type 'go' all the time, especially
when we have an exit named portal.  Players will rather type 'portal' to
go through that.

As for other aliases, lookup of alias table is done only ONCE, so that
infinte loop from alias lookup cannot be created.


Valid command lists
-------------------

We want to define a set of commands at the object level, so it will be a
singleton that all objects of the same type can reference (especially
when it is updated).  However we also want the instance of the object to
add/remove (override) arbitrary commands.
